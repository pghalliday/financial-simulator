// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseUrl: 'http://localhost:5174' | (string & {});
};

/**
 * AccountDayGet
 */
export type AccountDayGet = {
    /**
     * Name
     */
    name: string;
    /**
     * Sub Accounts
     */
    sub_accounts: Array<AccountDayGet>;
    /**
     * Balance
     */
    balance: string;
    /**
     * Total Balance
     */
    total_balance: string;
};

/**
 * ChangeTypeError
 */
export type ChangeTypeError = {
    /**
     * Type
     */
    type?: 'change-type';
    /**
     * Current Type
     */
    current_type: string;
    /**
     * New Type
     */
    new_type: string;
};

/**
 * CorporationEntityGet
 */
export type CorporationEntityGet = {
    /**
     * Type
     */
    type: 'corporation_entity';
    /**
     * Id
     */
    id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string;
};

/**
 * CorporationEntityPatch
 */
export type CorporationEntityPatch = {
    /**
     * Type
     */
    type: 'corporation_entity';
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * CorporationEntityPost
 */
export type CorporationEntityPost = {
    /**
     * Type
     */
    type: 'corporation_entity';
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string;
};

/**
 * DatabaseIntegrityError
 */
export type DatabaseIntegrityError = {
    /**
     * Type
     */
    type?: 'database-integrity';
    /**
     * Message
     */
    message: string;
};

/**
 * DayGet
 */
export type DayGet = {
    /**
     * Date
     */
    date: string;
    /**
     * Entities
     */
    entities: Array<EntityDayGet>;
};

/**
 * EntityDayGet
 */
export type EntityDayGet = {
    /**
     * Name
     */
    name: string;
    ledger: AccountDayGet;
};

/**
 * HTTPChangeTypeError
 */
export type HttpChangeTypeError = {
    detail: ChangeTypeError;
};

/**
 * HTTPDatabaseIntegrityError
 */
export type HttpDatabaseIntegrityError = {
    detail: DatabaseIntegrityError;
};

/**
 * HTTPNotFoundError
 */
export type HttpNotFoundError = {
    detail: NotFoundError;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * IndividualEntityGet
 */
export type IndividualEntityGet = {
    /**
     * Type
     */
    type: 'individual_entity';
    /**
     * Id
     */
    id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string;
};

/**
 * IndividualEntityPatch
 */
export type IndividualEntityPatch = {
    /**
     * Type
     */
    type: 'individual_entity';
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * IndividualEntityPost
 */
export type IndividualEntityPost = {
    /**
     * Type
     */
    type: 'individual_entity';
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string;
};

/**
 * NotFoundError
 */
export type NotFoundError = {
    /**
     * Type
     */
    type?: 'not-found';
    /**
     * Id
     */
    id: string;
};

/**
 * ScenarioGet
 */
export type ScenarioGet = {
    /**
     * Id
     */
    id: string;
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string;
};

/**
 * ScenarioPatch
 */
export type ScenarioPatch = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Description
     */
    description?: string | null;
};

/**
 * ScenarioPost
 */
export type ScenarioPost = {
    /**
     * Name
     */
    name: string;
    /**
     * Description
     */
    description: string;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type GetItemsScenariosGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/scenarios/';
};

export type GetItemsScenariosGetResponses = {
    /**
     * Response Get Items Scenarios  Get
     * Successful Response
     */
    200: Array<ScenarioGet>;
};

export type GetItemsScenariosGetResponse = GetItemsScenariosGetResponses[keyof GetItemsScenariosGetResponses];

export type PostItemScenariosPostData = {
    body: ScenarioPost;
    path?: never;
    query?: never;
    url: '/scenarios/';
};

export type PostItemScenariosPostErrors = {
    /**
     * Database integrity error
     */
    409: HttpDatabaseIntegrityError;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostItemScenariosPostError = PostItemScenariosPostErrors[keyof PostItemScenariosPostErrors];

export type PostItemScenariosPostResponses = {
    /**
     * Successful Response
     */
    200: ScenarioGet;
};

export type PostItemScenariosPostResponse = PostItemScenariosPostResponses[keyof PostItemScenariosPostResponses];

export type DeleteItemScenariosItemIdDeleteData = {
    body?: never;
    path: {
        /**
         * Item Id
         */
        item_id: string;
    };
    query?: never;
    url: '/scenarios/{item_id}';
};

export type DeleteItemScenariosItemIdDeleteErrors = {
    /**
     * Not found
     */
    404: HttpNotFoundError;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteItemScenariosItemIdDeleteError = DeleteItemScenariosItemIdDeleteErrors[keyof DeleteItemScenariosItemIdDeleteErrors];

export type DeleteItemScenariosItemIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: ScenarioGet;
};

export type DeleteItemScenariosItemIdDeleteResponse = DeleteItemScenariosItemIdDeleteResponses[keyof DeleteItemScenariosItemIdDeleteResponses];

export type GetItemScenariosItemIdGetData = {
    body?: never;
    path: {
        /**
         * Item Id
         */
        item_id: string;
    };
    query?: never;
    url: '/scenarios/{item_id}';
};

export type GetItemScenariosItemIdGetErrors = {
    /**
     * Not found
     */
    404: HttpNotFoundError;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemScenariosItemIdGetError = GetItemScenariosItemIdGetErrors[keyof GetItemScenariosItemIdGetErrors];

export type GetItemScenariosItemIdGetResponses = {
    /**
     * Successful Response
     */
    200: ScenarioGet;
};

export type GetItemScenariosItemIdGetResponse = GetItemScenariosItemIdGetResponses[keyof GetItemScenariosItemIdGetResponses];

export type PatchItemScenariosItemIdPatchData = {
    body: ScenarioPatch;
    path: {
        /**
         * Item Id
         */
        item_id: string;
    };
    query?: never;
    url: '/scenarios/{item_id}';
};

export type PatchItemScenariosItemIdPatchErrors = {
    /**
     * Not found
     */
    404: HttpNotFoundError;
    /**
     * Database integrity error
     */
    409: HttpDatabaseIntegrityError;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchItemScenariosItemIdPatchError = PatchItemScenariosItemIdPatchErrors[keyof PatchItemScenariosItemIdPatchErrors];

export type PatchItemScenariosItemIdPatchResponses = {
    /**
     * Successful Response
     */
    200: ScenarioGet;
};

export type PatchItemScenariosItemIdPatchResponse = PatchItemScenariosItemIdPatchResponses[keyof PatchItemScenariosItemIdPatchResponses];

export type PutItemScenariosItemIdPutData = {
    body: ScenarioPost;
    path: {
        /**
         * Item Id
         */
        item_id: string;
    };
    query?: never;
    url: '/scenarios/{item_id}';
};

export type PutItemScenariosItemIdPutErrors = {
    /**
     * Database integrity error
     */
    409: HttpDatabaseIntegrityError;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PutItemScenariosItemIdPutError = PutItemScenariosItemIdPutErrors[keyof PutItemScenariosItemIdPutErrors];

export type PutItemScenariosItemIdPutResponses = {
    /**
     * Successful Response
     */
    200: ScenarioGet;
};

export type PutItemScenariosItemIdPutResponse = PutItemScenariosItemIdPutResponses[keyof PutItemScenariosItemIdPutResponses];

export type GetItemsEntitiesGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/entities/';
};

export type GetItemsEntitiesGetResponses = {
    /**
     * Response Get Items Entities  Get
     * Successful Response
     */
    200: Array<IndividualEntityGet | CorporationEntityGet>;
};

export type GetItemsEntitiesGetResponse = GetItemsEntitiesGetResponses[keyof GetItemsEntitiesGetResponses];

export type PostItemEntitiesPostData = {
    /**
     * Item Post
     */
    body: IndividualEntityPost | CorporationEntityPost;
    path?: never;
    query?: never;
    url: '/entities/';
};

export type PostItemEntitiesPostErrors = {
    /**
     * Database integrity error
     */
    409: HttpDatabaseIntegrityError;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PostItemEntitiesPostError = PostItemEntitiesPostErrors[keyof PostItemEntitiesPostErrors];

export type PostItemEntitiesPostResponses = {
    /**
     * Response Post Item Entities  Post
     * Successful Response
     */
    200: IndividualEntityGet | CorporationEntityGet;
};

export type PostItemEntitiesPostResponse = PostItemEntitiesPostResponses[keyof PostItemEntitiesPostResponses];

export type DeleteItemEntitiesItemIdDeleteData = {
    body?: never;
    path: {
        /**
         * Item Id
         */
        item_id: string;
    };
    query?: never;
    url: '/entities/{item_id}';
};

export type DeleteItemEntitiesItemIdDeleteErrors = {
    /**
     * Not found
     */
    404: HttpNotFoundError;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteItemEntitiesItemIdDeleteError = DeleteItemEntitiesItemIdDeleteErrors[keyof DeleteItemEntitiesItemIdDeleteErrors];

export type DeleteItemEntitiesItemIdDeleteResponses = {
    /**
     * Response Delete Item Entities  Item Id  Delete
     * Successful Response
     */
    200: IndividualEntityGet | CorporationEntityGet;
};

export type DeleteItemEntitiesItemIdDeleteResponse = DeleteItemEntitiesItemIdDeleteResponses[keyof DeleteItemEntitiesItemIdDeleteResponses];

export type GetItemEntitiesItemIdGetData = {
    body?: never;
    path: {
        /**
         * Item Id
         */
        item_id: string;
    };
    query?: never;
    url: '/entities/{item_id}';
};

export type GetItemEntitiesItemIdGetErrors = {
    /**
     * Not found
     */
    404: HttpNotFoundError;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetItemEntitiesItemIdGetError = GetItemEntitiesItemIdGetErrors[keyof GetItemEntitiesItemIdGetErrors];

export type GetItemEntitiesItemIdGetResponses = {
    /**
     * Response Get Item Entities  Item Id  Get
     * Successful Response
     */
    200: IndividualEntityGet | CorporationEntityGet;
};

export type GetItemEntitiesItemIdGetResponse = GetItemEntitiesItemIdGetResponses[keyof GetItemEntitiesItemIdGetResponses];

export type PatchItemEntitiesItemIdPatchData = {
    /**
     * Item Patch
     */
    body: IndividualEntityPatch | CorporationEntityPatch;
    path: {
        /**
         * Item Id
         */
        item_id: string;
    };
    query?: never;
    url: '/entities/{item_id}';
};

export type PatchItemEntitiesItemIdPatchErrors = {
    /**
     * Not found
     */
    404: HttpNotFoundError;
    /**
     * Response 409 Patch Item Entities  Item Id  Patch
     * Database error
     */
    409: HttpDatabaseIntegrityError | HttpChangeTypeError;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PatchItemEntitiesItemIdPatchError = PatchItemEntitiesItemIdPatchErrors[keyof PatchItemEntitiesItemIdPatchErrors];

export type PatchItemEntitiesItemIdPatchResponses = {
    /**
     * Response Patch Item Entities  Item Id  Patch
     * Successful Response
     */
    200: IndividualEntityGet | CorporationEntityGet;
};

export type PatchItemEntitiesItemIdPatchResponse = PatchItemEntitiesItemIdPatchResponses[keyof PatchItemEntitiesItemIdPatchResponses];

export type PutItemEntitiesItemIdPutData = {
    /**
     * Item Post
     */
    body: IndividualEntityPost | CorporationEntityPost;
    path: {
        /**
         * Item Id
         */
        item_id: string;
    };
    query?: never;
    url: '/entities/{item_id}';
};

export type PutItemEntitiesItemIdPutErrors = {
    /**
     * Response 409 Put Item Entities  Item Id  Put
     * Database error
     */
    409: HttpDatabaseIntegrityError | HttpChangeTypeError;
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PutItemEntitiesItemIdPutError = PutItemEntitiesItemIdPutErrors[keyof PutItemEntitiesItemIdPutErrors];

export type PutItemEntitiesItemIdPutResponses = {
    /**
     * Response Put Item Entities  Item Id  Put
     * Successful Response
     */
    200: IndividualEntityGet | CorporationEntityGet;
};

export type PutItemEntitiesItemIdPutResponse = PutItemEntitiesItemIdPutResponses[keyof PutItemEntitiesItemIdPutResponses];

export type GetDummyDaysGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Start
         */
        start?: number;
        /**
         * End
         */
        end?: number;
    };
    url: '/dummy-days/';
};

export type GetDummyDaysGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetDummyDaysGetError = GetDummyDaysGetErrors[keyof GetDummyDaysGetErrors];

export type GetDummyDaysGetResponses = {
    /**
     * Successful Response
     */
    200: DayGet;
};

export type GetDummyDaysGetResponse = GetDummyDaysGetResponses[keyof GetDummyDaysGetResponses];
