[project]
name = "financial-simulator"
version = "0.1.0"
description = "Add your description here"
authors = [
    { name = "Peter Halliday", email = "pghalliday@gmail.com" }
]
requires-python = ">=3.13"
dependencies = [
    "dash>=3.2.0",
    "prettytable>=3.16.0",
    "pandas>=2.3.1",
    "plotly>=6.2.0",
    "alembic>=1.16.5",
    "cryptography>=46.0.1",
    "pydantic>=2.11.9",
    "plotly-stubs>=0.0.6",
    "pandas-stubs>=2.3.0.250703",
    "dash-mantine-components>=2.3.0",
    "dash-iconify>=0.1.2",
    "fastapi[standard]>=0.118.3",
    "uvicorn[standard]>=0.37.0",
    "sqlalchemy>=2.0.43",
]

[project.scripts]
financial-simulator = "financial_simulator.app.cli:cli"

[build-system]
requires = ["uv_build>=0.8.8,<0.9.0"]
build-backend = "uv_build"

[dependency-groups]
dev = [
    "jupyter>=1.1.1",
    "jupytext>=1.17.2",
    "kaleido>=1.0.0",
    "notebook>=7.4.5",
    "pytest>=8.4.1",
    "ruff>=0.12.8",
    "uv-build>=0.8.8",
]

[tool.pytest.ini_options]
minversion = "8.4.1"
addopts = "-ra -q"

[tool.alembic]

# path to migration scripts.
# this is typically a path given in POSIX (e.g. forward slashes)
# format, relative to the token %(here)s which refers to the location of this
# ini file
script_location = "%(here)s/src/financial_simulator/app/database/alembic"

# template used to generate migration file names; The default value is %%(rev)s_%%(slug)s
# Uncomment the line below if you want the files to be prepended with date and time
# see https://alembic.sqlalchemy.org/en/latest/tutorial.html#editing-the-ini-file
# for all available tokens
# file_template = "%%(year)d_%%(month).2d_%%(day).2d_%%(hour).2d%%(minute).2d-%%(rev)s_%%(slug)s"

# additional paths to be prepended to sys.path. defaults to the current working directory.
prepend_sys_path = [
    "."
]

# timezone to use when rendering the date within the migration file
# as well as the filename.
# If specified, requires the python>=3.9 or backports.zoneinfo library and tzdata library.
# Any required deps can installed by adding `alembic[tz]` to the pip requirements
# string value is passed to ZoneInfo()
# leave blank for localtime
# timezone =

# max length of characters to apply to the "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; This defaults
# to <script_location>/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path.
# version_locations = [
#    "%(here)s/alembic/versions",
#    "%(here)s/foo/bar"
# ]


# set to 'true' to search source files recursively
# in each "version_locations" directory
# new in Alembic version 1.10
# recursive_version_locations = false

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = "utf-8"

# This section defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples
# [[tool.alembic.post_write_hooks]]
# format using "black" - use the console_scripts runner,
# against the "black" entrypoint
# name = "black"
# type = "console_scripts"
# entrypoint = "black"
# options = "-l 79 REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# lint with attempts to fix using "ruff" - use the module runner, against the "ruff" module
# name = "ruff"
# type = "module"
# module = "ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"
#
# [[tool.alembic.post_write_hooks]]
# Alternatively, use the exec runner to execute a binary found on your PATH
# name = "ruff"
# type = "exec"
# executable = "ruff"
# options = "check --fix REVISION_SCRIPT_FILENAME"

